name: Build Native Modules

on:
  push:
    tags:
      - '*-v*'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            platform: windows
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: macos
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Parse tag
        id: tag
        run: |
          TAG_NAME=${{ github.ref_name }}
          PROJECT_NAME=$(echo "$TAG_NAME" | sed 's/-v[0-9].*//')
          VERSION=$(echo "$TAG_NAME" | sed 's/.*-v//')
          echo "project=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create package.json for native modules
        run: |
          node -e "
            const pkg = {
              name: 'native-modules-builder',
              version: '1.0.0',
              description: 'Build native Node.js modules and web3 packages',
              dependencies: {
                'sqlite3': '^5.1.6',
                'bcrypt': '^5.1.1',
                'keytar': '^7.9.0',
                'websocket': '1.0.35',
                'web3': '1.10.4',
                'web3-core': '1.10.4',
                'web3-providers-ws': '1.10.4',
                'web3-core-requestmanager': '1.10.4',
                '@truffle/contract': '4.6.31',
                '@truffle/hdwallet-provider': '2.1.15'
              }
            };
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
            console.log('Created package.json for native modules and web3 packages build');
          "

      - name: Install and compile native modules
        run: npm install

      - name: Prepare native binaries
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Create binaries directory
            if (!fs.existsSync('binaries')) fs.mkdirSync('binaries');
            
            // Function to find .node files recursively
            function findNodeFiles(dir, files = []) {
              const entries = fs.readdirSync(dir, { withFileTypes: true });
              for (const entry of entries) {
                const fullPath = path.join(dir, entry.name);
                if (entry.isDirectory()) {
                  findNodeFiles(fullPath, files);
                } else if (entry.name.endsWith('.node')) {
                  files.push(fullPath);
                }
              }
              return files;
            }
            
            // Find all .node files
            const nodeFiles = findNodeFiles('node_modules');
            const platform = '${{ matrix.platform }}';
            const arch = '${{ matrix.arch }}';
            
            // Copy files with proper naming
            for (const file of nodeFiles) {
              let moduleName = 'unknown';
              if (file.includes('sqlite3')) moduleName = 'sqlite3';
              else if (file.includes('bcrypt')) moduleName = 'bcrypt';
              else if (file.includes('keytar')) moduleName = 'keytar';
              else {
                // Extract module name from path
                const parts = file.split(path.sep);
                const nodeModulesIndex = parts.indexOf('node_modules');
                if (nodeModulesIndex >= 0 && nodeModulesIndex + 1 < parts.length) {
                  moduleName = parts[nodeModulesIndex + 1];
                }
              }
              
              const targetFile = 'binaries/' + platform + '-' + arch + '-' + moduleName + '.node';
              fs.copyFileSync(file, targetFile);
              console.log('Copied: ' + file + ' -> ' + targetFile);
            }
            
            console.log('Native binary preparation completed');
          "

      - name: Prepare web3 packages
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');
            
            const platform = '${{ matrix.platform }}';
            const packagesToBundle = [
              'websocket',
              'web3',
              'web3-core', 
              'web3-providers-ws',
              'web3-core-requestmanager',
              '@truffle/contract',
              '@truffle/hdwallet-provider'
            ];
            
            console.log('Packaging web3-related modules...');
            
            for (const packageName of packagesToBundle) {
              try {
                // Create temp directory for this package
                const tempDir = 'temp-' + packageName.replace('@', '').replace('/', '-');
                if (fs.existsSync(tempDir)) {
                  fs.rmSync(tempDir, { recursive: true, force: true });
                }
                fs.mkdirSync(tempDir);
                
                // Copy package from node_modules
                const sourceDir = path.join('node_modules', packageName);
                if (fs.existsSync(sourceDir)) {
                  // Copy directory contents
                  execSync('cp -r \"' + sourceDir + '/\"* \"' + tempDir + '/\"', { shell: true });
                  
                  // Create tarball
                  const tarName = platform + '-' + packageName.replace('@', '').replace('/', '-') + '.tgz';
                  execSync('tar -czf binaries/' + tarName + ' -C \"' + tempDir + '\" .', { shell: true });
                  
                  // Cleanup temp directory
                  fs.rmSync(tempDir, { recursive: true, force: true });
                  
                  console.log('Packaged: ' + packageName + ' -> ' + tarName);
                } else {
                  console.log('Package not found: ' + packageName);
                }
              } catch (error) {
                console.error('Error packaging ' + packageName + ':', error.message);
              }
            }
            
            console.log('Web3 package preparation completed');
          "
        shell: bash

      - name: List generated binaries
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            console.log('Generated binaries and packages:');
            const files = fs.readdirSync('binaries');
            files.forEach(file => {
              const stats = fs.statSync(path.join('binaries', file));
              const sizeKB = Math.round(stats.size/1024);
              const sizeMB = (stats.size/1024/1024).toFixed(1);
              console.log(file + ' (' + (sizeKB > 1024 ? sizeMB + 'MB' : sizeKB + 'KB') + ')');
            });
          "

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: binaries/*
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.project }} v${{ steps.tag.outputs.version }}
          body: |
            Native modules and web3 packages for ${{ steps.tag.outputs.project }} v${{ steps.tag.outputs.version }}
            
            **Platforms:**
            - Windows x64
            - Linux x64  
            - macOS x64
            
            **Available Native Modules:**
            - sqlite3.node (SQLite3 database)
            - bcrypt.node (Password hashing)  
            - keytar.node (System keychain access)
            
            **Available Web3 Packages:**
            - websocket.tgz (WebSocket package with crypto dependencies)
            - web3.tgz (Web3 main library)
            - web3-core.tgz (Web3 core functionality) 
            - web3-providers-ws.tgz (WebSocket provider)
            - web3-core-requestmanager.tgz (Request manager)
            - truffle-contract.tgz (@truffle/contract package)
            - truffle-hdwallet-provider.tgz (@truffle/hdwallet-provider package)
            
            These packages are pre-built to avoid crypto module bundling issues.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
